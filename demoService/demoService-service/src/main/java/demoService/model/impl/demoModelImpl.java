/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package demoService.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import demoService.model.demo;
import demoService.model.demoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the demo service. Represents a row in the &quot;demo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link demoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link demoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see demoImpl
 * @see demo
 * @see demoModel
 * @generated
 */
@ProviderType
public class demoModelImpl extends BaseModelImpl<demo> implements demoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a demo model instance should use the {@link demo} interface instead.
	 */
	public static final String TABLE_NAME = "demo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "demoId", Types.INTEGER },
			{ "demoName", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("demoId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("demoName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table demo (demoId INTEGER not null primary key,demoName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table demo";
	public static final String ORDER_BY_JPQL = " ORDER BY demo.demoId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY demo.demoId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(demoService.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.demoService.model.demo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(demoService.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.demoService.model.demo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(demoService.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.demoService.model.demo"),
			true);
	public static final long DEMONAME_COLUMN_BITMASK = 1L;
	public static final long DEMOID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(demoService.service.util.ServiceProps.get(
				"lock.expiration.time.demoService.model.demo"));

	public demoModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _demoId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setDemoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _demoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return demo.class;
	}

	@Override
	public String getModelClassName() {
		return demo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("demoId", getDemoId());
		attributes.put("demoName", getDemoName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer demoId = (Integer)attributes.get("demoId");

		if (demoId != null) {
			setDemoId(demoId);
		}

		String demoName = (String)attributes.get("demoName");

		if (demoName != null) {
			setDemoName(demoName);
		}
	}

	@Override
	public int getDemoId() {
		return _demoId;
	}

	@Override
	public void setDemoId(int demoId) {
		_demoId = demoId;
	}

	@Override
	public String getDemoName() {
		if (_demoName == null) {
			return StringPool.BLANK;
		}
		else {
			return _demoName;
		}
	}

	@Override
	public void setDemoName(String demoName) {
		_columnBitmask |= DEMONAME_COLUMN_BITMASK;

		if (_originalDemoName == null) {
			_originalDemoName = _demoName;
		}

		_demoName = demoName;
	}

	public String getOriginalDemoName() {
		return GetterUtil.getString(_originalDemoName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public demo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (demo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		demoImpl demoImpl = new demoImpl();

		demoImpl.setDemoId(getDemoId());
		demoImpl.setDemoName(getDemoName());

		demoImpl.resetOriginalValues();

		return demoImpl;
	}

	@Override
	public int compareTo(demo demo) {
		int primaryKey = demo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof demo)) {
			return false;
		}

		demo demo = (demo)obj;

		int primaryKey = demo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		demoModelImpl demoModelImpl = this;

		demoModelImpl._originalDemoName = demoModelImpl._demoName;

		demoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<demo> toCacheModel() {
		demoCacheModel demoCacheModel = new demoCacheModel();

		demoCacheModel.demoId = getDemoId();

		demoCacheModel.demoName = getDemoName();

		String demoName = demoCacheModel.demoName;

		if ((demoName != null) && (demoName.length() == 0)) {
			demoCacheModel.demoName = null;
		}

		return demoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{demoId=");
		sb.append(getDemoId());
		sb.append(", demoName=");
		sb.append(getDemoName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("demoService.model.demo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>demoId</column-name><column-value><![CDATA[");
		sb.append(getDemoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>demoName</column-name><column-value><![CDATA[");
		sb.append(getDemoName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = demo.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			demo.class
		};
	private int _demoId;
	private String _demoName;
	private String _originalDemoName;
	private long _columnBitmask;
	private demo _escapedModel;
}